Q1(ARRAY SUM)
#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>

#define ARRAY_SIZE 100

int main(int argc, char** argv) {
    MPI_Init(&argc, &argv);

    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (size < 2) {
        fprintf(stderr, "This program requires at least 2 processes.\n");
        MPI_Finalize();
        return EXIT_FAILURE;
    }

    // Initialize array in process 0
    int* array = NULL;
    if (rank == 0) {
        array = (int*)malloc(ARRAY_SIZE * sizeof(int));
        for (int i = 0; i < ARRAY_SIZE; ++i) {
            array[i] = i + 1;  // Initialize array with values 1 to ARRAY_SIZE
        }
    }

    // Calculate local sum for each process
    int local_sum = 0;
    for (int i = rank; i < ARRAY_SIZE; i += size) {
        local_sum += array[i];
    }

    // Send local sum to process 0
    if (rank != 0) {
        MPI_Send(&local_sum, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);
    } else {
        // Process 0 receives partial sums from other processes and calculates the total sum
        int total_sum = local_sum;
        for (int i = 1; i < size; ++i) {
            MPI_Recv(&local_sum, 1, MPI_INT, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
            total_sum += local_sum;
        }

        // Print the final result in process 0
        printf("Total sum: %d\n", total_sum);
    }

    // Clean up and finalize MPI
    if (rank == 0) {
        free(array);
    }
    MPI_Finalize();

    return EXIT_SUCCESS;
}


GFG---------------------------------------------
#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

// size of array
#define n 10

int a[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

// Temporary array for slave process
int a2[1000];

int main(int argc, char* argv[])
{

	int pid, np,
		elements_per_process,
		n_elements_recieved;
	// np -> no. of processes
	// pid -> process id

	MPI_Status status;

	// Creation of parallel processes
	MPI_Init(&argc, &argv);

	// find out process ID,
	// and how many processes were started
	MPI_Comm_rank(MPI_COMM_WORLD, &pid);
	MPI_Comm_size(MPI_COMM_WORLD, &np);

	// master process
	if (pid == 0) {
		int index, i;
		elements_per_process = n / np;

		// check if more than 1 processes are run
		if (np > 1) {
			// distributes the portion of array
			// to child processes to calculate
			// their partial sums
			for (i = 1; i < np - 1; i++) {
				index = i * elements_per_process;

				MPI_Send(&elements_per_process,
						1, MPI_INT, i, 0,
						MPI_COMM_WORLD);
				MPI_Send(&a[index],
						elements_per_process,
						MPI_INT, i, 0,
						MPI_COMM_WORLD);
			}

			// last process adds remaining elements
			index = i * elements_per_process;
			int elements_left = n - index;

			MPI_Send(&elements_left,
					1, MPI_INT,
					i, 0,
					MPI_COMM_WORLD);
			MPI_Send(&a[index],
					elements_left,
					MPI_INT, i, 0,
					MPI_COMM_WORLD);
		}

		// master process add its own sub array
		int sum = 0;
		for (i = 0; i < elements_per_process; i++)
			sum += a[i];

		// collects partial sums from other processes
		int tmp;
		for (i = 1; i < np; i++) {
			MPI_Recv(&tmp, 1, MPI_INT,
					MPI_ANY_SOURCE, 0,
					MPI_COMM_WORLD,
					&status);
			int sender = status.MPI_SOURCE;

			sum += tmp;
		}

		// prints the final sum of array
		printf("Sum of array is : %d\n", sum);
	}
	// slave processes
	else {
		MPI_Recv(&n_elements_recieved,
				1, MPI_INT, 0, 0,
				MPI_COMM_WORLD,
				&status);

		// stores the received array segment
		// in local array a2
		MPI_Recv(&a2, n_elements_recieved,
				MPI_INT, 0, 0,
				MPI_COMM_WORLD,
				&status);

		// calculates its partial sum
		int partial_sum = 0;
		for (int i = 0; i < n_elements_recieved; i++)
			partial_sum += a2[i];

		// sends the partial sum to the root process
		MPI_Send(&partial_sum, 1, MPI_INT,
				0, 0, MPI_COMM_WORLD);
	}

	// cleans up all MPI state before exit of process
	MPI_Finalize();

	return 0;
}


ASSIGNMENT9(q2)

#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>

int main(int argc, char** argv) {
    MPI_Init(&argc, &argv);

    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    int N = 100;  // Number of integers

    // Initialize array in each process
    int* local_array = (int*)malloc(N / size * sizeof(int));
    for (int i = 0; i < N / size; ++i) {
        local_array[i] = (rank * (N / size)) + i + 1;  // Initialize array with values
    }

    // Calculate local sum for each process
    int local_sum = 0;
    for (int i = 0; i < N / size; ++i) {
        local_sum += local_array[i];
    }

    // Perform MPI_Reduce to calculate the global sum in process 0
    int global_sum;
    MPI_Reduce(&local_sum, &global_sum, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);

    // Print the final result in process 0
    if (rank == 0) {
        printf("Total sum: %d\n", global_sum);
    }

    // Clean up and finalize MPI
    free(local_array);
    MPI_Finalize();

    return EXIT_SUCCESS;
}


3)BROADCAST, SCATTER, GATHER
#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>

#define ARRAY_SIZE 100

int main(int argc, char** argv) {
    MPI_Init(&argc, &argv);

    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (size < 2) {
        fprintf(stderr, "This program requires at least 2 processes.\n");
        MPI_Finalize();
        return EXIT_FAILURE;
    }

    int* array = NULL;

    if (rank == 0) {
        // Initialize array in process 0
        array = (int*)malloc(ARRAY_SIZE * sizeof(int));
        for (int i = 0; i < ARRAY_SIZE; ++i) {
            array[i] = i + 1;  // Initialize array with values 1 to ARRAY_SIZE
        }
    }

    // Broadcast the array from process 0 to all processes
    MPI_Bcast(array, ARRAY_SIZE, MPI_INT, 0, MPI_COMM_WORLD);

    // Scatter the array among processes
    int local_size = ARRAY_SIZE / size;
    int* local_array = (int*)malloc(local_size * sizeof(int));

    MPI_Scatter(array, local_size, MPI_INT, local_array, local_size, MPI_INT, 0, MPI_COMM_WORLD);

    // Calculate local sum for each process
    int local_sum = 0;
    for (int i = 0; i < local_size; ++i) {
        local_sum += local_array[i];
    }

    // Gather the local sums to process 0
    int* all_sums = NULL;
    if (rank == 0) {
        all_sums = (int*)malloc(size * sizeof(int));
    }

    MPI_Gather(&local_sum, 1, MPI_INT, all_sums, 1, MPI_INT, 0, MPI_COMM_WORLD);

    // Print the final result in process 0
    if (rank == 0) {
        int total_sum = 0;
        for (int i = 0; i < size; ++i) {
            total_sum += all_sums[i];
        }
        printf("Total sum: %d\n", total_sum);
    }

    // Clean up and finalize MPI
    if (rank == 0) {
        free(array);
        free(all_sums);
    }
    free(local_array);
    MPI_Finalize();

    return EXIT_SUCCESS;
}


4)QUICK_SORT(MPI)
#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>

#define ARRAY_SIZE 100

void quicksort(int array[], int low, int high);
int partition(int array[], int low, int high);
void merge(int array[], int low, int mid, int high);

int main(int argc, char** argv) {
    MPI_Init(&argc, &argv);

    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    int* array = NULL;

    if (rank == 0) {
        // Initialize array in process 0
        array = (int*)malloc(ARRAY_SIZE * sizeof(int));
        for (int i = 0; i < ARRAY_SIZE; ++i) {
            array[i] = rand() % 1000;  // Initialize array with random values
        }

        printf("Original array in process 0:\n");
        for (int i = 0; i < ARRAY_SIZE; ++i) {
            printf("%d ", array[i]);
        }
        printf("\n");
    }

    // Broadcast the array from process 0 to all processes
    MPI_Bcast(array, ARRAY_SIZE, MPI_INT, 0, MPI_COMM_WORLD);

    // Divide the array into chunks for each process
    int local_size = ARRAY_SIZE / size;
    int* local_array = (int*)malloc(local_size * sizeof(int));

    MPI_Scatter(array, local_size, MPI_INT, local_array, local_size, MPI_INT, 0, MPI_COMM_WORLD);

    // Sort the local array using quicksort
    quicksort(local_array, 0, local_size - 1);

    // Gather the sorted local arrays to process 0
    int* sorted_array = NULL;
    if (rank == 0) {
        sorted_array = (int*)malloc(ARRAY_SIZE * sizeof(int));
    }

    MPI_Gather(local_array, local_size, MPI_INT, sorted_array, local_size, MPI_INT, 0, MPI_COMM_WORLD);

    // Merge the sorted local arrays in process 0
    if (rank == 0) {
        for (int i = 1; i < size; ++i) {
            merge(sorted_array, 0, i * local_size, (i + 1) * local_size - 1);
        }

        printf("Sorted array in process 0:\n");
        for (int i = 0; i < ARRAY_SIZE; ++i) {
            printf("%d ", sorted_array[i]);
        }
        printf("\n");

        free(sorted_array);
    }

    // Clean up and finalize MPI
    if (rank == 0) {
        free(array);
    }
    free(local_array);
    MPI_Finalize();

    return EXIT_SUCCESS;
}

void quicksort(int array[], int low, int high) {
    if (low < high) {
        int pivot_index = partition(array, low, high);

        // Recursively sort the subarrays
        quicksort(array, low, pivot_index - 1);
        quicksort(array, pivot_index + 1, high);
    }
}

int partition(int array[], int low, int high) {
    int pivot = array[high];
    int i = low - 1;

    for (int j = low; j <= high - 1; ++j) {
        if (array[j] <= pivot) {
            i++;
            // Swap array[i] and array[j]
            int temp = array[i];
            array[i] = array[j];
            array[j] = temp;
        }
    }

    // Swap array[i + 1] and array[high]
    int temp = array[i + 1];
    array[i + 1] = array[high];
    array[high] = temp;

    return i + 1;
}

void merge(int array[], int low, int mid, int high) {
    int i, j, k;
    int n1 = mid - low + 1;
    int n2 = high - mid;

    int* left = (int*)malloc(n1 * sizeof(int));
    int* right = (int*)malloc(n2 * sizeof(int));

    for (i = 0; i < n1; i++)
        left[i] = array[low + i];
    for (j = 0; j < n2; j++)
        right[j] = array[mid + 1 + j];

    i = 0;
    j = 0;
    k = low;
    while (i < n1 && j < n2) {
        if (left[i] <= right[j]) {
            array[k] = left[i];
            i++;
        } else {
            array[k] = right[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        array[k] = left[i];
        i++;
        k++;
    }

    while (j < n2) {
        array[k] = right[j];
        j++;
        k++;
    }

    free(left);
    free(right);
}
